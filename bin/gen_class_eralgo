#!/usr/bin/env python
import sys, os
if len(sys.argv)<2:
   sys.stderr.write('Usage: %s CLASS_NAME\n\n' % sys.argv[0])
   sys.exit(1)
if not 'LARLITE_USERDEVDIR' in os.environ.keys():
   sys.stderr.write('$LARLITE_USERDEVDIR not defined!\n\n')
   sys.exit(1)
for f in ['GNUmakefile','LinkDef.h']:
   if not f in os.listdir(os.getcwd()):
      sys.stderr.write('Current directory does not appear to be a package (missing %s).\n\n' % f)
      sys.exit(1)

target_dir = os.getcwd()
working_package = target_dir.replace(target_dir[0:target_dir.rfind('/')+1],'')
name='ERAlgo' + sys.argv[1]
source_dir='%s/SelectionTool/ERTool/Algo/bin/tmp' % os.environ['LARLITE_USERDEVDIR']

in_source='%s/algo.cxx' % source_dir
in_header='%s/algo.h' % source_dir

src_list = { in_source   : '%s/%s.cxx' % (target_dir,name),
             in_header   : '%s/%s.h'   % (target_dir,name) }

for src in src_list.keys():
   if os.path.isfile(src_list[src]):
      sys.stderr.write('File already exists: %s\n\n' % src_list[src])
      sys.exit(1)
      
for src in src_list.keys():
   contents=open(src,'r').read()
   contents=contents.replace('ALGO_CLASS_NAME',name.upper())
   contents=contents.replace('algo_class_name',name.lower())
   contents=contents.replace('Algo_Class_Name',name)
   contents=contents.replace('Shell_User_Name',os.environ['USER'])
   contents=contents.replace('Working_Package',working_package)
   fout=open(src_list[src],'w')
   fout.write(contents)
   fout.close()

# modify LinkDef
contents=open('%s/LinkDef.h' % target_dir, 'r').read().split('\n')
fout=open('%s/LinkDef.h' % target_dir,'w')
for line in contents:
   line=line + '\n'
   if line.find('ADD_NEW_CLASS')>=0:
      line='#pragma link C++ class ertool::%s+;\n%s' % (name,line)
   fout.write(line)

# modify GNUmakefile (if necessary)
contents=open('%s/GNUmakefile' % target_dir, 'r').read()
inc_inserted = (contents.find('seltool-config --includes') >= 0)
lib_inserted = (contents.find('seltool-config --libs') >= 0)
if not inc_inserted or not lib_inserted:
   contents = contents.split('\n')
   new_contents=''
   for l in contents:
      if not inc_inserted and not l.find('INCFLAG') < 0:
         l += '\n'
         l += 'INCFLAGS += $(shell seltool-config --includes)'
         inc_inserted=True
      if not lib_inserted and not l.find('LDFLAGS') < 0:
         l += '\n'
         l += 'LDFLAGS += $(shell seltool-config --libs)'
         lib_inserted=True
      new_contents += '%s\n' % l

   # Check if flags are inserted... if not, insert right before GNUMakefile.Core
   if not inc_inserted or not lib_inserted:
      if new_contents.find('GNUmakefile.CORE')<0:
         print 'Failed to update GNUmakefile...'
         sys.exit(1)
      contents = new_contents.split('\n')
      new_contents = ''
      for l in contents:
         if not inc_inserted and not l.find('GNUmakefile.CORE') < 0:
            l = 'INCFLAGS += $(shell seltool-config --includes)\n%s' % l
            inc_inserted=True
         if not lib_inserted and not l.find('GNUmakefile.CORE') < 0:
            l = 'LDFLAGS += $(shell seltool-config --libs)\n%s' % l
            lib_inserted=True
         new_contents += '%s\n' % l
      
   fout=open('%s/GNUmakefile' % target_dir,'w')
   fout.write(new_contents)
   fout.close()

print
print 'Generated the followings under %s.' % target_dir
for key in src_list.keys():
   print '    %s' % src_list[key]
print
print 'To compile your program, try:'
print '    > make --directory=%s' % target_dir
print ' OR'
print '    > cd %s; make;' % target_dir
print
print 'To remove your algo code, you should remove:'
print '%s/%s.h' % (target_dir,name)
print '%s/%s.cxx' % (target_dir,name)
print
print 'Finally remove #pragma statement for your class from'
print '%s/LinkDef.h' % target_dir
print
print 'I let you go now :)'
print
print
sys.exit(0)
